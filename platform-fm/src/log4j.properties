log4j.rootLogger=DEBUG, CONSOLE,ALL,ConsoleAppender

# 把日志信息打印到控制台：
log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender
log4j.appender.CONSOLE.Target = System.out
#INFO覆盖优先级比它低的DEBUG  
#log4j.appender.CONSOLE.Threshold = INFO 
log4j.appender.CONSOLE.Threshold = DEBUG
log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout
log4j.appender.CONSOLE.layout.ConversionPattern= [platform-fm] %p [%C.%M]  %m%n

#记录全部的日志信息，并输出到文件
log4j.appender.ALL = org.apache.log4j.DailyRollingFileAppender  
log4j.appender.ALL.File = ${catalina.base}/logs/platform-fm-log.log  
log4j.appender.ALL.DatePattern = '.'yyyy-MM-dd'.log'
#INFO覆盖优先级比它低的DEBUG  
#log4j.appender.ALL.Threshold = INFO 
log4j.appender.ALL.Threshold = DEBUG  
log4j.appender.ALL.layout = org.apache.log4j.PatternLayout  
log4j.appender.ALL.layout.ConversionPattern = [platform-fm] %d{yyyy-MM-dd HH:mm:ss,SSS} %p [%C.%M]  %m%n

#记录错误的日志信息，并输出到文件
log4j.appender.ERROR = org.apache.log4j.DailyRollingFileAppender  
log4j.appender.ERROR.File = logs/platform-fm-error.log  
log4j.appender.ERROR.DatePattern = '.'yyyy-MM-dd'.log'  
log4j.appender.ERROR.Threshold = ERROR  
log4j.appender.ERROR.layout = org.apache.log4j.PatternLayout  
log4j.appender.ERROR.layout.ConversionPattern = [platform-fm] %d{yyyy-MM-dd HH:mm:ss,SSS} %p [%C.%M]  %m%n

# mybatis
log4j.logger.com.ibatis=debug
log4j.logger.com.ibatis.common.jdbc.SimpleDataSource=debug
log4j.logger.com.ibatis.common.jdbc.ScriptRunner=debug
log4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate=debug
log4j.logger.java.sql.Connection=debug
log4j.logger.java.sql.Statement=debug
log4j.logger.java.sql.PreparedStatement=debug 

# 日志输出级别，共有5级：
# FATAL      0  
# ERROR      3  
# WARN       4  
# INFO       6  
# DEBUG      7 
#  %m   输出代码中指定的消息
#  　 %p   输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL 
#　　%r   输出自应用启动到输出该log信息耗费的毫秒数 
#　　%c   输出所属的类目，通常就是所在类的全名 
#　　%t   输出产生该日志事件的线程名 
#　　%n   输出一个回车换行符，Windows平台为“\\r\\n”，Unix平台为“\\n” 
#　　%d   输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss , SSS}，输出类似：2002年10月18日  22 ： 10 ： 28 ， 921  
#　　%l   输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java: 10 )  

#%C输出日志所属类目的调用者的全类名。
#[QC]是log信息的开头，可以为任意字符，一般为项目简称。
#不常用的几个：
#%F 输出日志消息产生时所在的文件名称。性能不好，不建议使用
#%M 输出日志消息产生时所在的方法名称。性能不好，不建议使用
#%x 输出和当前线程相关联的NDC(nested diagnostic context)环境，用于多客户多线程的应用中
#%X 输出和当前线程相关联的MDC(mapped diagnostic context)环境。